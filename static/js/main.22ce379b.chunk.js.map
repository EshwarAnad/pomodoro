{"version":3,"sources":["components/Work.js","components/Play.js","components/Sessions.js","components/Pomodoro.js","App.js","serviceWorker.js","index.js"],"names":["Work","props","id","workTime","className","onClick","clickController","Play","breakTime","Sessions","timeMins","Math","floor","timer","timeSeconds","onOff","reset","infoText","Pomodoro","counting","App","switchTimer","document","getElementById","play","working","state","setState","handleReset","referenceDate","pauseDate","paused","handleStartStop","Date","handleDate","newDate","event","target","intervalID","this","setInterval","clearInterval","type","src","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.22ce379b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Work = (props)=> {\r\n    return (\r\n        <div id=\"session-label\">\r\n            <p>Session Length</p>\r\n            <p id=\"session-length\">{props.workTime}</p>\r\n            <div>\r\n                <button id=\"session-decrement\" className=\"btnTime\" onClick={props.clickController}>-</button>\r\n                <button id=\"session-increment\" className=\"btnTime\" onClick={props.clickController}>+</button>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Work;","import React from 'react';\r\n\r\nconst Play = (props)=> {\r\n    return (\r\n        <div id=\"break-label\">\r\n            <p>Break Length</p>\r\n            <p id=\"break-length\">{props.breakTime}</p>\r\n            <div>\r\n                <button id=\"break-decrement\" className=\"btnTime\" onClick={props.clickController}>-</button>\r\n                <button id=\"break-increment\" className=\"btnTime\" onClick={props.clickController}>+</button>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Play;","import React from 'react';\r\n\r\nconst Sessions = (props)=> {\r\n    let timeMins = Math.floor(props.timer/60);\r\n    if(timeMins < 10){timeMins = '0' + timeMins}\r\n    \r\n    let timeSeconds = (props.timer % 60);\r\n    if(timeSeconds < 10){timeSeconds = '0' + timeSeconds}\r\n\r\n    return (\r\n        <div id='session-control'>\r\n            <p>Session Control</p>\r\n            <div>\r\n                <button id='start_stop' className='btnControls' onClick={props.onOff}>start / stop</button>  \r\n                <button id='reset' className='btnControls' onClick={props.reset}>reset</button>\r\n            </div>\r\n\r\n            <p id='timer-label'>{props.infoText}</p>\r\n            <p id='time-left'>time left: {` ${timeMins}:${timeSeconds}`}</p>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sessions;","import React from 'react';\r\nimport Work from './Work';\r\nimport Play from './Play';\r\nimport Sessions from './Sessions';\r\n\r\nconst Pomodoro = (props)=> {\r\n    return (\r\n        <div>\r\n            <h3>Pomodoro Clock</h3>\r\n            <div id=\"pomodoro\">\r\n                <Work \r\n                    workTime={props.workTime}\r\n                    clickController = {props.clickController} />\r\n\r\n                <Play \r\n                    breakTime={props.breakTime}\r\n                    clickController = {props.clickController} />\r\n\r\n                <Sessions reset={props.reset} \r\n                    clickController = {props.clickController}\r\n                    counting={props.counting} \r\n                    onOff={props.onOff}\r\n                    infoText={props.infoText}\r\n                    timer={props.timer}\r\n                    />   \r\n            </div> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pomodoro;","import React from 'react';\nimport './App.css';\nimport Pomodoro from './components/Pomodoro';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      infoText:'session timer',\n      workTime: 25,\n      breakTime: 5,\n      counting: false,\n      working: true,\n      timer: 25*60,\n      referenceDate: 0, \n      pauseDate: 0,\n      paused: true, \n      intervalID: 0\n    }\n  }\n\n  switchTimer = ()=> {\n    const audioEl = document.getElementById('beep');\n    audioEl.play();\n    const working = !this.state.working;\n    const infoText = this.state.working ? \"break timer\" : \"session timer\";\n    const timer = this.state.working ? this.state.breakTime * 60 : this.state.workTime * 60\n    this.setState({\n      working,\n      timer,\n      infoText\n    })\n  }\n\n  componentDidMount(){\n    this.setState({\n      timer: 25 * 60,\n      intervalID: setInterval(this.handleDate, 80)\n    })\n  }\n  componentWillUnmount(){\n   clearInterval(this.state.intervalID)\n  }\n\n  componentDidUpdate(){              \n    if(this.state.timer <= 0){\n      this.switchTimer();\n    }\n  }\n\n  handleReset = ()=> {\n    this.setState({\n      infoText:'session timer',\n      workTime: 25,\n      breakTime: 5,\n      counting: false,\n      working: true,\n      timer: 25*60,\n      referenceDate: 0,\n      pauseDate: 0,\n      paused: true\n    })\n  }\n  handleStartStop = ()=> {\n    this.setState({\n      counting: !this.state.counting,\n      paused: !this.state.paused,\n      pauseDate: (!this.state.paused || 0) && new Date()\n    })\n  }\n  handleDate = ()=> {\n    const newDate = new Date();\n    if(!this.state.paused && newDate - this.state.referenceDate + this.state.pauseDate >= 1000){\n      this.setState ({\n        timer: this.state.timer - 1,\n        referenceDate: new Date()\n      })\n    }\n  }\n  //for increment and decrement of timer values\n  clickController = (event) => {\n    const id = event.target.id;\n    const working = this.state.working;\n    switch(id){\n      case 'session-increment':\n        if (this.state.workTime >= 60){\n          return;\n        }\n        this.setState({\n          workTime: this.state.workTime + 1,\n          timer: working ? this.state.timer + 60 : this.state.timer\n        }) \n        break;\n      case 'session-decrement':  \n        if (this.state.workTime <= 1){\n          return;\n        }\n        this.setState({\n          workTime: this.state.workTime - 1,\n          timer: working ? this.state.timer - 60 : this.state.timer\n        })\n        break;\n      case 'break-increment':\n        if (this.state.breakTime >= 60){\n          return;\n        }\n        this.setState({\n          breakTime: this.state.breakTime + 1,\n          timer: !working ? this.state.timer + 60 : this.state.timer\n        })\n        break;\n      case 'break-decrement':  \n        if (this.state.breakTime <= 1){\n          return;\n        }\n        this.setState({\n          breakTime: this.state.breakTime - 1,\n          timer: !working ? this.state.timer - 60 : this.state.timer\n        })\n        break;\n      default: return;\n    }  \n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <audio id='beep' type='audio/mp3'>\n          <source src=\"/audio/A-Tone-His_Self-1266414414.mp3\"></source>\n        </audio>\n        <Pomodoro infoText={this.state.infoText} \n                  workTime={this.state.workTime} \n                  breakTime={this.state.breakTime}\n                  counting={this.state.counting} \n                  timer={this.state.timer} \n\n                  clickController={this.clickController} \n                  onOff={this.handleStartStop}\n                  reset={this.handleReset} \n                  />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}